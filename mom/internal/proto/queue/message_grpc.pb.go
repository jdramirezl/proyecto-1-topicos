// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mom/proto/message.proto

package queue

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueueServiceClient is the client API for QueueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueServiceClient interface {
	AddMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RemoveMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ConsumeMessage(ctx context.Context, opts ...grpc.CallOption) (QueueService_ConsumeMessageClient, error)
}

type queueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueServiceClient(cc grpc.ClientConnInterface) QueueServiceClient {
	return &queueServiceClient{cc}
}

func (c *queueServiceClient) AddMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/QueueService/addMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) RemoveMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/QueueService/removeMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) ConsumeMessage(ctx context.Context, opts ...grpc.CallOption) (QueueService_ConsumeMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &QueueService_ServiceDesc.Streams[0], "/QueueService/ConsumeMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &queueServiceConsumeMessageClient{stream}
	return x, nil
}

type QueueService_ConsumeMessageClient interface {
	Send(*ConsumeMessageRequest) error
	Recv() (*ConsumeMessageResponse, error)
	grpc.ClientStream
}

type queueServiceConsumeMessageClient struct {
	grpc.ClientStream
}

func (x *queueServiceConsumeMessageClient) Send(m *ConsumeMessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *queueServiceConsumeMessageClient) Recv() (*ConsumeMessageResponse, error) {
	m := new(ConsumeMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QueueServiceServer is the server API for QueueService service.
// All implementations must embed UnimplementedQueueServiceServer
// for forward compatibility
type QueueServiceServer interface {
	AddMessage(context.Context, *MessageRequest) (*empty.Empty, error)
	RemoveMessage(context.Context, *MessageRequest) (*empty.Empty, error)
	ConsumeMessage(QueueService_ConsumeMessageServer) error
	mustEmbedUnimplementedQueueServiceServer()
}

// UnimplementedQueueServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQueueServiceServer struct {
}

func (UnimplementedQueueServiceServer) AddMessage(context.Context, *MessageRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMessage not implemented")
}
func (UnimplementedQueueServiceServer) RemoveMessage(context.Context, *MessageRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMessage not implemented")
}
func (UnimplementedQueueServiceServer) ConsumeMessage(QueueService_ConsumeMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method ConsumeMessage not implemented")
}
func (UnimplementedQueueServiceServer) mustEmbedUnimplementedQueueServiceServer() {}

// UnsafeQueueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueServiceServer will
// result in compilation errors.
type UnsafeQueueServiceServer interface {
	mustEmbedUnimplementedQueueServiceServer()
}

func RegisterQueueServiceServer(s grpc.ServiceRegistrar, srv QueueServiceServer) {
	s.RegisterService(&QueueService_ServiceDesc, srv)
}

func _QueueService_AddMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).AddMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QueueService/addMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).AddMessage(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_RemoveMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).RemoveMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QueueService/removeMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).RemoveMessage(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_ConsumeMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QueueServiceServer).ConsumeMessage(&queueServiceConsumeMessageServer{stream})
}

type QueueService_ConsumeMessageServer interface {
	Send(*ConsumeMessageResponse) error
	Recv() (*ConsumeMessageRequest, error)
	grpc.ServerStream
}

type queueServiceConsumeMessageServer struct {
	grpc.ServerStream
}

func (x *queueServiceConsumeMessageServer) Send(m *ConsumeMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *queueServiceConsumeMessageServer) Recv() (*ConsumeMessageRequest, error) {
	m := new(ConsumeMessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QueueService_ServiceDesc is the grpc.ServiceDesc for QueueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "QueueService",
	HandlerType: (*QueueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addMessage",
			Handler:    _QueueService_AddMessage_Handler,
		},
		{
			MethodName: "removeMessage",
			Handler:    _QueueService_RemoveMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConsumeMessage",
			Handler:       _QueueService_ConsumeMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mom/proto/message.proto",
}
