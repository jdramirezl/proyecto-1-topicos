// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mom/proto/resolver.proto

package resolver

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResolverServiceClient is the client API for ResolverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResolverServiceClient interface {
	NewMaster(ctx context.Context, in *MasterMessage, opts ...grpc.CallOption) (*empty.Empty, error)
	GetMaster(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MasterMessage, error)
}

type resolverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResolverServiceClient(cc grpc.ClientConnInterface) ResolverServiceClient {
	return &resolverServiceClient{cc}
}

func (c *resolverServiceClient) NewMaster(ctx context.Context, in *MasterMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ResolverService/NewMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resolverServiceClient) GetMaster(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MasterMessage, error) {
	out := new(MasterMessage)
	err := c.cc.Invoke(ctx, "/ResolverService/GetMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResolverServiceServer is the server API for ResolverService service.
// All implementations must embed UnimplementedResolverServiceServer
// for forward compatibility
type ResolverServiceServer interface {
	NewMaster(context.Context, *MasterMessage) (*empty.Empty, error)
	GetMaster(context.Context, *empty.Empty) (*MasterMessage, error)
	mustEmbedUnimplementedResolverServiceServer()
}

// UnimplementedResolverServiceServer must be embedded to have forward compatible implementations.
type UnimplementedResolverServiceServer struct {
}

func (UnimplementedResolverServiceServer) NewMaster(context.Context, *MasterMessage) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewMaster not implemented")
}
func (UnimplementedResolverServiceServer) GetMaster(context.Context, *empty.Empty) (*MasterMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaster not implemented")
}
func (UnimplementedResolverServiceServer) mustEmbedUnimplementedResolverServiceServer() {}

// UnsafeResolverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResolverServiceServer will
// result in compilation errors.
type UnsafeResolverServiceServer interface {
	mustEmbedUnimplementedResolverServiceServer()
}

func RegisterResolverServiceServer(s grpc.ServiceRegistrar, srv ResolverServiceServer) {
	s.RegisterService(&ResolverService_ServiceDesc, srv)
}

func _ResolverService_NewMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResolverServiceServer).NewMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ResolverService/NewMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResolverServiceServer).NewMaster(ctx, req.(*MasterMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResolverService_GetMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResolverServiceServer).GetMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ResolverService/GetMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResolverServiceServer).GetMaster(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ResolverService_ServiceDesc is the grpc.ServiceDesc for ResolverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResolverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ResolverService",
	HandlerType: (*ResolverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewMaster",
			Handler:    _ResolverService_NewMaster_Handler,
		},
		{
			MethodName: "GetMaster",
			Handler:    _ResolverService_GetMaster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mom/proto/resolver.proto",
}
